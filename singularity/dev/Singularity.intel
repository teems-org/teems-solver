Bootstrap: docker
From: ubuntu:20.04
Stage: os

%labels
    Author m.cantele@unimelb.com
    Version v1.0
    MyLabel TEEMS-solver on Focal base
    org.label-schema.license GPL-2.0

%files
    /tmp/solver /home/teems-solver/solver
    /tmp/tarballs /home/teems-solver/tarballs
    /tmp/hsl/ma48 /home/teems-solver/tmp/hsl/ma48
    /tmp/hsl/ma51 /home/teems-solver/tmp/hsl/ma51
    /tmp/hsl/mc66 /home/teems-solver/tmp/hsl/mc66
    /tmp/hsl/mp48 /home/teems-solver/tmp/hsl/mp48

%environment
    export SINGULARITY_MPICH_DIR=$MPICH_DIR
    export SINGULARITYENV_APPEND_PATH=$MPICH_DIR/bin
    export SINGULAIRTYENV_APPEND_LD_LIBRARY_PATH=$MPICH_DIR/lib
    export SINGULARITY_OMPI_DIR=$OMPI_DIR
    export SINGULARITYENV_APPEND_PATH=$OMPI_DIR/bin
    export SINGULAIRTYENV_APPEND_LD_LIBRARY_PATH=$OMPI_DIR/lib
    export PATH="/home/teems-solver/lib/mpi/bin:$PATH"

%post
    apt-get -y update && DEBIAN_FRONTEND=noninteractive apt-get install -y apt-utils locales \
    && echo "LC_ALL=en_US.UTF-8" >> /etc/environment \
    && echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen \
    && echo "LANG=en_US.UTF-8" > /etc/locale.conf \
    && locale-gen en_US.UTF-8 \
    && apt-get -y update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
        build-essential \
        gfortran \
        python3 \
        python3-pip \
        python3-distutils \
        python-setuptools \
        libblas-dev \
        libopenblas-dev \
        libx11-dev \
        git \
        wget \
        autoconf \
        automake \
        libtool

# TEEMS-specific packages
    export BUILD=/home/teems-solver
    export PETSC_ARCH=focal
    export PETSC_VERSION=3.14.3
    export OPENMPI_VERSION=4.1.1
    export OPENMPI_BASE_VERSION=4.1
    export MPICH_VERSION=4.1.2

# libraries directory
    mkdir -p ${BUILD}/tmp \
        ${BUILD}/lib/ucx \
        ${BUILD}/lib/mpi \
        ${BUILD}/lib/ma48 \
        ${BUILD}/lib/ma51

# UCX install
    cd ${BUILD}/tmp \
    && git clone https://github.com/openucx/ucx.git \
    && cd ucx \
    && ./autogen.sh \
    && ./contrib/configure-release --prefix=${BUILD}/lib/ucx/install \
    && make -j8 install

# OPENMPI
    cd ${BUILD}/tmp \
    && mkdir openmpi \
    && cd openmpi \
    && wget https://download.open-mpi.org/release/open-mpi/v${OPENMPI_BASE_VERSION}/openmpi-${OPENMPI_VERSION}.tar.gz \
    && tar xfz openmpi-${OPENMPI_VERSION}.tar.gz --strip-components=1 \
    && ./configure --prefix=${BUILD}/lib/mpi \
    && make all install

# MPICH
    cd ${BUILD}/tmp \
    && mkdir mpich \
    && cd mpich \
    && wget https://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz \
    && tar xfz mpich-${MPICH_VERSION}.tar.gz --strip-components=1 \
    && ./configure --prefix=${BUILD}/lib/mpi --with-ucx=${BUILD}/lib/ucx/install \
    && make \
    && make install \
    && export PATH="${BUILD}/lib/mpi/bin:$PATH"

# PETSC
    cd ${BUILD}/lib \
    && git clone -b release https://gitlab.com/petsc/petsc.git petsc \
    && cd petsc \
    && git checkout v${PETSC_VERSION} \
    && ldconfig \
    && pip3 install --no-cache-dir pandas toolz \
    && python3 ./config/configure.py --configModules=PETSc.Configure --optionsModule=config.compilerOptions -configModules=PETSc.Configure -optionsModule=config.compilerOptions -with-debugging=0 -with-mpi-dir=${BUILD}/lib/mpi -with-afterimage COPTFLAGS="-O3 -march=p4 -mtune=p4" FOPTFLAGS="-O3 -qarch=p4 -qtune=p4" -with-shared-libraries=0 PETSC_ARCH=${PETSC_ARCH} PETSC_DIR=$PWD \
    && make PETSC_DIR=$PWD PETSC_ARCH=${PETSC_ARCH} all

# hsl
    cp -r ${BUILD}/tmp/hsl/ma48 ${BUILD}/lib \
    && cd ${BUILD}/lib/ma48 \
    && ./configure \
    && make \
    && cp -r ${BUILD}/tmp/hsl/ma51 ${BUILD}/lib \
    && cd ${BUILD}/lib/ma51 \
    && ./configure \
    && make \
    && cp -r ${BUILD}/tmp/hsl/mp48 ${BUILD}/lib \
    && cd ${BUILD}/lib/mp48 \
    && ./configure \
    && make \
    && cp ${BUILD}/tmp/hsl/mc66/src/hsl_mc66d.f90 ${BUILD}/solver \
    && cp ${BUILD}/tmp/hsl/mc66/src/ddeps90.f90 ${BUILD}/solver 

# final build
    cp -r ${BUILD}/tmp/solver ${BUILD} \
    cd ${BUILD}/solver \
    && make clean \
    && make

# cleanup
    rm -rf ${BUILD}/tarballs \
    && rm -rf ${BUILD}/tmp

# rm makefile, other files where possible
# potentially remove all .c files prevent 